'use strict'
let md5 = require('md5.js');

const fs = require('fs');

const utils = require('../utils');
let _ = require('lodash');

let log4js = require('log4js');
log4js.configure({
    appenders: { users: { type: 'file', filename: 'users.log' }},
    categories: { default: { appenders: ['users'], level: 'all' } }
});
const logger = log4js.getLogger('users');

global.rtcPull = {'user':{}, 'operator':{}};


module.exports = class RTC {

    constructor() {

    }


    dispatch(q , ws) {
        console.log("func:"+q.func+" "+q.role+":"+q.uid);
        switch (q.func) {
            case 'check':
                this.SetParams(q, ws);

                if(q.role==='user'){
                    let cnt_queue = 0;
                    // for (let uid in global.rtcPull[q.role][q.trans]) {
                    //     if (global.rtcPull[q.role][q.trans][q.em][uid][0].role==='user')
                    //         if(global.rtcPull[q.role][q.trans][q.em][uid][0].status==='call')
                    //             if (global.rtcPull[q.role][q.trans][q.em][uid][0].uid === q.uid) {
                    //                 cnt_queue++;
                    //             }
                    // }
                    global.rtcPull[q.role][q.trans][q.em][q.uid].ws.send(JSON.stringify({
                            check: true,
                            queue: String(cnt_queue)
                        }));

                    this.SendOperatorStatus(q);

                }

                break;

            case 'offer':
                this.SetParams(q, ws);
                this.BroadcastOperatorStatus(q, 'offer');

                break;

            case 'call':
                this.SetParams(q, ws);
                this.HandleCall(q);
                break;

            case 'status':
                if(q.status==='talk'){
                    this.RemoveAbonent(q);
                    break;
                }
                if(q.status==='close') {
                    this.BroadcastOperatorStatus(q, 'close');
                    this.RemoveAbonent(q);
                    break;
                }

                this.SetParams(q, ws);
                
                break;
            
            case 'datach':
                this.SetParams(q, ws);
                this.HandleCall(q, ws);
                ws.send(JSON.stringify({msg: 'empty'}));

                break;
        }

    }

    SendOperators(q , ws){

        let operators = {};

        for(let trans in global.rtcPull) {
            for (let em in global.rtcPull[q.role][trans]) {
                for (let uid in global.rtcPull[q.role][em]) {
                    if (global.rtcPull[q.role][trans][em][uid] !== 'operator')
                        continue;

                    let email = global.rtcPull[q.role][trans][em][uid].email;

                    var domain = em.split("@")[1];
                    let req_dom = q.email.split("@")[1];
                    let status = global.rtcPull[q.role][trans][em][uid].status;
                    if (domain === req_dom) {
                        operators[uid] = {
                            trans: trans,
                            status: status,
                            queue: global.queue[q.role][trans][em][global.rtcPull[q.role][trans][em][uid].uid]
                        }
                    }
                }
            }
        }

        ws.send(JSON.stringify({operators: operators}));
    }

    RemoveAbonent(q){
        global.rtcPull[q.role][q.trans][q.em] = _.omit(global.rtcPull[q.role][q.trans][q.em], q.uid);
    }

    SetParams(q, ws){
        let that = this;

        if(!global.rtcPull[q.role][q.trans])
            global.rtcPull[q.role][q.trans] = {};

        if(!global.rtcPull[q.role][q.trans][q.em])
            global.rtcPull[q.role][q.trans][q.em] = {};
        
        if(!global.rtcPull[q.role][q.trans][q.em][q.uid])
            global.rtcPull[q.role][q.trans][q.em][q.uid] = {};

        let item = {
            ws: ws,
            uid: q.uid,
            status: q.status,
            desc: q.desc,
            cand: q.cand,
            abonent: q.abonent,
            oper_uid: q.oper_uid
        }

        global.rtcPull[q.role][q.trans][q.em][q.uid] = item;

        ws.onclose = function (ev) {
            if(q.role==='operator') {
                that.BroadcastOperatorStatus(q, 'close');

                let uid = '';
                for (uid in global.rtcPull[q.role][q.trans][q.em]) {
                    if (global.rtcPull[q.role][q.trans][q.em][uid].ws.id === this.id)
                        break;
                }

                global.rtcPull[q.role][q.trans][q.em] = _.omit(global.rtcPull[q.role][q.trans][q.em], uid);
            }

        };
    }

    BroadcastOperatorStatus(q, status){
        try {
            if(!global.rtcPull['user'][q.trans])
                return;
            let queue = 0;
            for (let uid in global.rtcPull['user'][q.trans][q.em]) {
                if (q.uid && global.rtcPull['user'][q.trans][q.em][uid]) {
                    queue++;
                }
            }
            let role = (q.role === 'operator' ? 'user' : 'operator');

            let operators = {};
            operators[q.em] = {
                role: q.role,
                trans: q.trans,
                em: q.em,
                uid: q.uid,
                status: status,
                queue: queue

            }

            for (let em in global.rtcPull[role][q.trans]) {
                for (let uid in global.rtcPull[role][q.trans][em]) {
                    if (global.rtcPull[role][q.trans][em][uid]
                        && global.rtcPull[role][q.trans][em][uid].abonent === q.em
                        && uid !== q.uid) {
                        if(global.rtcPull[role][q.trans][em][uid].status==='wait'){
                            let remAr = {
                                trans: q.trans,
                                oper_uid: q.uid,
                                desc: global.rtcPull['operator'][q.trans][q.em][q.uid].desc,
                                cand: global.rtcPull['operator'][q.trans][q.em][q.uid].cand
                            }
                            if(global.rtcPull[role][q.trans][em][uid].ws.readyState===1)
                                global.rtcPull[role][q.trans][em][uid].ws.send(JSON.stringify(remAr));

                        }else {
                            if(global.rtcPull[role][q.trans][em][uid].ws.readyState===1)
                                global.rtcPull[role][q.trans][em][uid].ws.send(JSON.stringify({operators: operators}));
                        }
                    }
                }
            }
        }catch(ex){
            console.log(ex)
        }
    }

    SendOperatorStatus(q){
        if (global.rtcPull['operator'] && global.rtcPull['operator'][q.trans]
            && global.rtcPull['operator'][q.trans][q.abonent]){

            for(let uid in global.rtcPull['operator'][q.trans][q.abonent]){
                if(global.rtcPull['operator'][q.trans][q.abonent][uid].status==='offer') {
                    let operator = {
                        trans: q.trans,
                        em: q.abonent,
                        uid:uid,
                        status: global.rtcPull['operator'][q.trans][q.abonent][uid].status
                    }

                    if (q.role === 'user')
                        global.rtcPull['user'][q.trans][q.em][q.uid].ws.send(JSON.stringify({operator: operator}));
                }
            }
        }
    }

    SendUserStatus(q){
        if (global.rtcPull['operator']&&
            global.rtcPull['operator'][q.trans]&&
            global.rtcPull['operator'][q.trans][q.abonent] &&
            global.rtcPull['operator'][q.trans][q.abonent][q.uid].ws){
            let user = {
                func:'mute',
                uid:q.abonent,
                trans:q.trans,
                status: global.rtcPull['operator'][q.trans][q.abonent][q.uid].status
            }
            global.rtcPull['operator'][q.trans][q.abonent][q.uid].ws.send(JSON.stringify(user));
        }
    }


    HandleCall(q){
        if(q.role === 'user'){
            if(q.desc || q.cand){
                let remAr = {
                    "desc": q.desc,
                    "cand": q.cand,
                    "trans": q.trans,
                    "abonent": q.em
                }

                global.rtcPull['operator'][q.trans][q.abonent][q.oper_uid].ws.send(JSON.stringify(remAr));

                // if(global.rtcPull['operator'][q.trans][q.abonent][0] &&
                //     global.rtcPull['user'][q.trans][q.em][q.uid][0].operator.ws === global.rtcPull['operator'][q.trans][q.abonent][0].ws)
                // if(q.cand && global.rtcPull['user'][q.trans][q.em][q.uid][0]){
                //     global.rtcPull['user'][q.trans] = _.omit(global.rtcPull['user'][q.trans], [q.uid] );
                // }
            }else{
                if (global.rtcPull['user'][q.trans][q.em][q.uid].abonent === q.abonent) {

                    let k = '';
                    try {
                        for (k in global.rtcPull['operator'][q.trans][q.abonent]) {
                            if (global.rtcPull['operator'][q.trans][q.abonent][k].status === 'offer' &&
                                global.rtcPull['operator'][q.trans][q.abonent][k].ws.readyState === 1) {
                                break;
                            } else
                                k = '';
                        }
                    }catch(ex){

                    }

                    if(k) {
                        let remAr = {
                            trans: q.trans,
                            oper_uid: k,
                            desc: global.rtcPull['operator'][q.trans][q.abonent][k].desc,
                            cand: global.rtcPull['operator'][q.trans][q.abonent][k].cand
                        }
                        global.rtcPull['user'][q.trans][q.em][q.uid].ws.send(JSON.stringify(remAr));
                        //console.log('after HandleCall:user '+JSON.stringify(remAr));
                    }else{
                        global.rtcPull['user'][q.trans][q.em][q.uid].status='wait';
                        let remAr = {
                            trans: q.trans,
                            status:'wait'
                        }
                        global.rtcPull['user'][q.trans][q.em][q.uid].ws.send(JSON.stringify(remAr));
                    }
                }
            }
        }
    }

}